package coolguysoft.com.spectremeltdownvulnerabilitydiagnostictoolkitadvanced;

import android.graphics.Color;
import android.support.v7.app.ActionBar;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;
import com.google.android.gms.ads.AdListener;
import com.google.android.gms.ads.AdRequest;
import com.google.android.gms.ads.AdView;
import com.google.android.gms.ads.InterstitialAd;
import com.google.android.gms.ads.MobileAds;
import com.google.android.gms.ads.reward.RewardItem;
import com.google.android.gms.ads.reward.RewardedVideoAd;
import com.google.android.gms.ads.reward.RewardedVideoAdListener;

import org.w3c.dom.Text;

import java.util.Timer;
import java.util.TimerTask;

public class vuln_checker extends AppCompatActivity implements RewardedVideoAdListener {
    Button verifyButton;
    ProgressBar spinnerBar;
    TextView mainText;
    TextView checkingText;
    ImageView checkmark;
    AdView adView;
    AdView secondAdView;
    InterstitialAd fullScreenAd;
    RewardedVideoAd videoAd;
    private boolean hasWatched = false;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_vuln_checker);
        getSupportActionBar().setHomeAsUpIndicator(R.drawable.ic_verified_user_black_24dp);
        getSupportActionBar().setHomeButtonEnabled(true);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        getSupportActionBar().setTitle("Meltdown Vulnerability Checker");
        verifyButton = (Button) findViewById(R.id.button);
        spinnerBar = (ProgressBar) findViewById(R.id.spinnerBar);
        mainText = (TextView) findViewById(R.id.mainText);
        checkingText = (TextView) findViewById(R.id.checkingTextView);
        checkmark = (ImageView) findViewById(R.id.imageView);
        adView = (AdView) findViewById(R.id.adView);
        secondAdView = (AdView) findViewById(R.id.adView2);
        MobileAds.initialize(this,"ca-app-pub-8858219597916065~4611556871");
        videoAd = MobileAds.getRewardedVideoAdInstance(this);
        videoAd.setRewardedVideoAdListener(this);
        loadAd();
        adView.loadAd(new AdRequest.Builder().build());
        secondAdView.loadAd(new AdRequest.Builder().build());
        fullScreenAd = new InterstitialAd(this);
        fullScreenAd.setAdUnitId("ca-app-pub-8858219597916065/3653698420");
        fullScreenAd.loadAd(new AdRequest.Builder().build());
        fullScreenAd.setAdListener(new AdListener() {
            @Override
            public void onAdLoaded() {
                fullScreenAd.show();
            }
        });
    }
private void loadAd() {
    videoAd.loadAd("ca-app-pub-8858219597916065/4829434323",
            new AdRequest.Builder().build());
}

    public void buttonOnClick(View v) {
        if(!this.hasWatched) {
            if (videoAd.isLoaded()) {
                videoAd.show();
            }
        }
        else {
            verifyButton.setVisibility(View.INVISIBLE);
            mainText.setVisibility(View.INVISIBLE);
            spinnerBar.setVisibility(View.VISIBLE);
            checkingText.setVisibility(View.VISIBLE);
            Timer timer = new Timer();
            timer.schedule(new TimerTask() {
                @Override
                public void run() {
                    runOnUiThread(successLoop);
                }
            }, 3500, 100000);
        }
    }

    public Runnable successLoop = new Runnable() {
        @Override
        public void run() {
            checkingText.setText("Your device is free of vulnerabilities!");
            spinnerBar.setVisibility(View.INVISIBLE);
            checkmark.setVisibility(View.VISIBLE);
        }
    };

    @Override
    public void onRewarded(RewardItem reward) {
        this.hasWatched = true;
        this.verifyButton.setText("Check Device");
        this.verifyButton.setBackgroundColor(verifyButton.getContext().getResources().getColor(R.color.colorAccent));
        this.verifyButton.setTextColor(Color.WHITE);
    }

    @Override
    public void onRewardedVideoAdLeftApplication() {
    }

    @Override
    public void onRewardedVideoAdClosed() {
        if(!hasWatched) {
            this.verifyButton.setEnabled(false);
            this.verifyButton.setText("Loading...");
            this.loadAd();
            Toast toast = Toast.makeText(this, "Please watch the full duration of the video to gain access to the scan.", Toast.LENGTH_LONG);
            toast.show();
        }
    }

    @Override
    public void onRewardedVideoAdFailedToLoad(int errorCode) {
        Toast toast = Toast.makeText(this, "Sorry, we're having some trouble communicating with the server. Please check your network settings, or try again later..", Toast.LENGTH_LONG);
    }

    @Override
    public void onRewardedVideoAdLoaded() {
        verifyButton.setEnabled(true);
        verifyButton.setText("View Video");
    }

    @Override
    public void onRewardedVideoAdOpened() {
    }

    @Override
    public void onRewardedVideoStarted() {
    }

}
